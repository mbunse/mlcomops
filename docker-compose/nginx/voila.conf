log_format header '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '$http_x_forwarded_user $http_host $http_x_forwarded_email '
                    '$http_x_forwarded_groups $is_allowed '
                    '"$http_referer" "$http_user_agent"';

# example to use map to extract group membership from forwarded groups header
map $http_x_forwarded_groups $is_allowed {
    default         0;
    "~\breaders\b"  1; # is 'readers' listed in groups?
}

# variables_hash_max_size 2048;

server {
    listen 9140; # Use TLS in production
    error_log /opt/bitnami/nginx/logs/error.log debug;
    access_log /opt/bitnami/nginx/logs/access.log header;
    resolver 8.8.8.8;

    # proxy_busy_buffers_size   512k;
    # proxy_buffers   4 512k;
    # proxy_buffer_size   256k;

    client_body_in_file_only on;

    # location / {
    #     # $uri
    #     if ($is_allowed = 0) {
    #         return 403;
    #     }
    #     proxy_redirect     off;
    #     proxy_set_header   Host $host;
    #     proxy_pass http://voila:8888;

    # }
    # location /voila/render/ {
    #     return 403;
    # }

    location / {
        if ($is_allowed = 0) {
            return 403;
        }
        #proxy_set_header   Host $host;
        proxy_pass http://label-studio:8080;
    }

#   location /oauth2/ {
#     proxy_pass       http://localhost:4180;
#     proxy_set_header Host                    $host;
#     proxy_set_header X-Real-IP               $remote_addr;
#     proxy_set_header X-Scheme                $scheme;
#     proxy_set_header X-Auth-Request-Redirect $request_uri;
#     # or, if you are handling multiple domains:
#     # proxy_set_header X-Auth-Request-Redirect $scheme://$host$request_uri;
#   }
#   location = /oauth2/auth {
#     proxy_pass       http://localhost:4180;
#     proxy_set_header Host             $host;
#     proxy_set_header X-Real-IP        $remote_addr;
#     proxy_set_header X-Scheme         $scheme;
#     # nginx auth_request includes headers but not body
#     proxy_set_header Content-Length   "";
#     proxy_pass_request_body           off;
#   }

#   location / {
#     auth_request /oauth2/auth;
#     error_page 401 = /oauth2/sign_in;

#     # pass information via X-User and X-Email headers to backend,
#     # requires running with --set-xauthrequest flag
#     auth_request_set $user   $upstream_http_x_auth_request_user;
#     auth_request_set $email  $upstream_http_x_auth_request_email;
#     proxy_set_header X-User  $user;
#     proxy_set_header X-Email $email;

#     # if you enabled --pass-access-token, this will pass the token to the backend
#     auth_request_set $token  $upstream_http_x_auth_request_access_token;
#     proxy_set_header X-Access-Token $token;

#     # if you enabled --cookie-refresh, this is needed for it to work with auth_request
#     auth_request_set $auth_cookie $upstream_http_set_cookie;
#     add_header Set-Cookie $auth_cookie;

#     # When using the --set-authorization-header flag, some provider's cookies can exceed the 4kb
#     # limit and so the OAuth2 Proxy splits these into multiple parts.
#     # Nginx normally only copies the first `Set-Cookie` header from the auth_request to the response,
#     # so if your cookies are larger than 4kb, you will need to extract additional cookies manually.
#     auth_request_set $auth_cookie_name_upstream_1 $upstream_cookie_auth_cookie_name_1;

#     # Extract the Cookie attributes from the first Set-Cookie header and append them
#     # to the second part ($upstream_cookie_* variables only contain the raw cookie content)
#     if ($auth_cookie ~* "(; .*)") {
#         set $auth_cookie_name_0 $auth_cookie;
#         set $auth_cookie_name_1 "auth_cookie_name_1=$auth_cookie_name_upstream_1$1";
#     }

#     # Send both Set-Cookie headers now if there was a second part
#     if ($auth_cookie_name_upstream_1) {
#         add_header Set-Cookie $auth_cookie_name_0;
#         add_header Set-Cookie $auth_cookie_name_1;
#     }

#     proxy_pass http://localhost:9150/;
#     # or "root /path/to/site;" or "fastcgi_pass ..." etc
#   }

}